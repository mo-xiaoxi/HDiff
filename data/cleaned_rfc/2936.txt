Entities composing web pages to provide services over [HTTP] frequently have the problem of not knowing what [MIME] types have handlers installed at a user's browser.  For example, whether an [IOTP] or VRML or [SET] or some streaming media handler is available. In many cases they would want to display different web pages or content depending on a MIME handler's availability.  Sending a response with a MIME type that is not supported frequently results in interrupting the flow of the user experience, browser queries as to what to do with the data being provided, and, of course, failure to provide the behavior that would have occurred had the correct MIME type handler been installed.
This document describes reasonable techniques to solve this problem for most of the browsers actually deployed on the Internet as of early 2000.  It is intended to be of practical use to implementors during the period before the wide deployment of superior standards based techniques which may be developed.  It is written in terms of determining whether a handler for application/iotp or application/x- iotp exists but is equally applicable to other MIME types.
The problem should be solved by the Hyper Text Transport Protocol [HTTP] request "Accept" header which lists accepted [MIME] types. This header is present in both Version 1.0 and 1.1 of HTTP and its content is supposed to be a list of MIME types and subtypes that are accepted.  The only problem is that many browsers just send "*/*" or the like. If the particular MIME type you are looking for is specifically present in the Accept header, it is generally safe to assume that a handler for it is actually installed or part of the browser.
NOTE: Although not part of the main topic of this document, if you are designing MIME type handler software and have access to a browser interface that allows you to request the insertion of the MIME type or types your software handles into the Accept header, you generally should do so.  It will make it easier for servers sensitive to that MIME type to respond correctly.
Most recent browsers support one or more scripting languages of which the most widely deployed is "JavaScript".  These scripting languages appear in web pages and permit the interpretive execution of programming language constructs that can probe the browser environment, conditionally cause different page contents to be displayed, etc.  For example, Appendix A shows JavaScript available from the Netscape web site for determining what operating system, browser, and version on which a web page is appearing.
NOTE: JavaScript is a trademark of SUN Microsystems, Inc.  It was originally called LiveScript.  It has nothing to do with the Java language.
The syntax for script use appears to be a Hyper Text Markup Language (HTML) comment so that browsers that do not support scripting will ignore such items.  That is, script use is preceded by "<!--" and terminated by "-->".  The following is a simple example of conditional execution of parts of a web page based on JavaScript MIME type handler detection.
NOTE: ActiveX is a trademark of Microsoft and was originally called Sweeper.
A industry group has recently proposed a standard for fields used in electronic commerce.  This fields allow "wallet" software acting for the consumer to convey standardized information to a merchant, including information as to what payment related protocols are supported at the customer site.  See [ECML].
The following diagram indicates how these techniques can be put together.
Active work is proceeding in the IETF, World Wide Web Consortium [W3C], and other standards and industry groups concerning content and capabilities negotiation.  This work is likely to lead to superior methods to implement the functionality described herein.  However, near universal deployment of such new standards/features will take some time.  Thus you should expect the methods given herein to be obsoleted, but perhaps not for some time.
It should be noted that the variety of ActiveX control suggested above is reading the user's registry, that is, examining their computer and reporting back some information it has discovered.  This may be a concern among some users. In general, the use of JavaScript and, even more so, ActiveX is dangerous because they are so powerful.  JavaScript or ActiveX from a web page could be invisibly damaging to the client.
Security of web interactions is normally provided by adopting channel encryption on the browser to server connections, such as [TLS].  In the absence of some such additional security outside of HTTP, requests and/or responses may be forged or tampered with.
None specific to the techniques described herein.  For MIME types and type registration procedures, see [MIME: RFCs 2046, 2048].
SCRIPT LANGUAGE="JavaScript"> <!-- hide JavaScript from non-JavaScript browsers // Ultimate client-side JavaScript client sniff. // (C) Netscape Communications 1999. //     Permission granted to reuse and distribute. // Revised 17 May 99 to add is_nav5up and is_ie5up (see below).
See http://www.it97.de/JavaScript/JS_tutorial/bstat/navobj.html and // http://www.it97.de/JavaScript/JS_tutorial/bstat/Browseraol.html // for detailed lists of userAgent strings.
agt.indexOf("16bit")!=-1) ); // NOTE: On Opera 3.0, the userAgent string includes "Windows 95/NT4" // on all Win32, so you can't distinguish between Win95 and WinNT.
NOTE: Reliable detection of Win98 may not be possible. // It appears that: //  - On Nav 4.x and before you'll get plain "Windows" in userAgent. //  - On Mercury client, the 32-bit version will return "Win98", but //    the 16-bit version running on Win98 will still return "Win95".
Copyright (C) The Internet Society (2000).  All Rights Reserved.
This document and translations of it may be copied and furnished to others, and derivative works that comment on or otherwise explain it or assist in its implementation may be prepared, copied, published and distributed, in whole or in part, without restriction of any kind, provided that the above copyright notice and this paragraph are included on all such copies and derivative works.  However, this document itself may not be modified in any way, such as by removing the copyright notice or references to the Internet Society or other Internet organizations, except as needed for the purpose of developing Internet standards in which case the procedures for copyrights defined in the Internet Standards process must be followed, or as required to translate it into languages other than English.
The limited permissions granted above are perpetual and will not be revoked by the Internet Society or its successors or assigns.
This document and the information contained herein is provided on an "AS IS" basis and THE INTERNET SOCIETY AND THE INTERNET ENGINEERING TASK FORCE DISCLAIMS ALL WARRANTIES, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO ANY WARRANTY THAT THE USE OF THE INFORMATION HEREIN WILL NOT INFRINGE ANY RIGHTS OR ANY IMPLIED WARRANTIES OF MERCHANTABILITY OR FITNESS FOR A PARTICULAR PURPOSE.
Funding for the RFC Editor function is currently provided by the Internet Society.
