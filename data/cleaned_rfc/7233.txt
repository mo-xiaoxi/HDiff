Hypertext Transfer Protocol (HTTP) clients often encounter interrupted data transfers as a result of canceled requests or dropped connections.  When a client has stored a partial representation, it is desirable to request the remainder of that representation in a subsequent request rather than transfer the entire representation.  Likewise, devices with limited local storage might benefit from being able to request only a subset of a larger representation, such as a single page of a very large document, or the dimensions of an embedded image.
This document defines HTTP/1.1 range requests, partial responses, and the multipart/byteranges media type.  Range requests are an OPTIONAL feature of HTTP, designed so that recipients not implementing this feature (or not supporting it for the target resource) can respond as if it is a normal GET request without impacting interoperability. Partial responses are indicated by a distinct status code to not be mistaken for full responses by caches that might not implement the feature.
Although the range request mechanism is designed to allow for extensible range types, this specification only defines requests for byte ranges.
The key words &quot;MUST&quot;, &quot;MUST NOT&quot;, &quot;REQUIRED&quot;, &quot;SHALL&quot;, &quot;SHALL NOT&quot;, &quot;SHOULD&quot;, &quot;SHOULD NOT&quot;, &quot;RECOMMENDED&quot;, &quot;MAY&quot;, and &quot;OPTIONAL&quot; in this document are to be interpreted as described in [<a href="/doc/html/rfc2119" title="&quot;Key words for use in RFCs to Indicate Requirement Levels&quot;">RFC2119</a>].
Conformance criteria and considerations regarding error handling are defined in <a href="/doc/html/rfc7230#section-2.5">Section&nbsp;2.5 of [RFC7230]</a>.
This specification uses the Augmented Backus-Naur Form (ABNF) notation of [<a href="/doc/html/rfc5234" title="&quot;Augmented BNF for Syntax Specifications: ABNF&quot;">RFC5234</a>] with a list extension, defined in <a href="/doc/html/rfc7230#section-7">Section&nbsp;7 of [RFC7230]</a>, that allows for compact definition of comma-separated lists using a &#x27;#&#x27; operator (similar to how the &#x27;*&#x27; operator indicates repetition).  <a href="#appendix-C">Appendix C</a> describes rules imported from other documents.  <a href="#appendix-D">Appendix D</a> shows the collected grammar with all list operators expanded to standard ABNF notation.
A representation can be partitioned into subranges according to various structural units, depending on the structure inherent in the representation&#x27;s media type.  This &quot;range unit&quot; is used in the Accept-Ranges (<a href="#section-2.3">Section 2.3</a>) response header field to advertise support for range requests, the Range (<a href="#section-3.1">Section 3.1</a>) request header field to delineate the parts of a representation that are requested, and the Content-Range (<a href="#section-4.2">Section 4.2</a>) payload header field to describe which part of a representation is being transferred.
Since representation data is transferred in payloads as a sequence of octets, a byte range is a meaningful substructure for any representation transferable over HTTP (<a href="/doc/html/rfc7231#section-3">Section&nbsp;3 of [RFC7231]</a>).  The &quot;bytes&quot; range unit is defined for expressing subranges of the data&#x27;s octet sequence.
A byte-range request can specify a single range of bytes or a set of ranges within a single representation.
The first-byte-pos value in a byte-range-spec gives the byte-offset of the first byte in a range.  The last-byte-pos value gives the byte-offset of the last byte in the range; that is, the byte positions specified are inclusive.  Byte offsets start at zero.
bytes=500-999 A byte-range-spec is invalid if the last-byte-pos value is present and less than the first-byte-pos.
A client can limit the number of bytes requested without knowing the size of the selected representation.  If the last-byte-pos value is absent, or if the value is greater than or equal to the current length of the representation data, the byte range is interpreted as the remainder of the representation (i.e., the server replaces the value of last-byte-pos with a value that is one less than the current length of the selected representation).
A client can request the last N bytes of the selected representation using a suffix-byte-range-spec.
If the selected representation is shorter than the specified suffix-length, the entire representation is used.
If a valid byte-range-set includes at least one byte-range-spec with a first-byte-pos that is less than the current length of the representation, or at least one suffix-byte-range-spec with a non-zero suffix-length, then the byte-range-set is satisfiable. Otherwise, the byte-range-set is unsatisfiable. In the byte-range syntax, first-byte-pos, last-byte-pos, and suffix-length are expressed as decimal number of octets.  Since there is no predefined limit to the length of a payload, recipients MUST anticipate potentially large decimal numerals and prevent parsing errors due to integer conversion overflows.
Range units are intended to be extensible.  New range units ought to be registered with IANA, as defined in <a href="#section-5.1">Section 5.1</a>.
The &quot;Accept-Ranges&quot; header field allows a server to indicate that it supports range requests for the target resource.
to indicate what range units are supported.  A client MAY generate range requests without having received this header field for the resource involved.  Range units are defined in <a href="#section-2">Section 2</a>.
to advise the client not to attempt a range request.
The &quot;Range&quot; header field on a GET request modifies the method semantics to request transfer of only one or more subranges of the selected representation data, rather than the entire selected representation data.
A server MAY ignore the Range header field.  However, origin servers and intermediate caches ought to support byte ranges when possible, since Range supports efficient recovery from partially failed transfers and partial retrieval of large representations.  A server MUST ignore a Range header field received with a request method other than GET.
An origin server MUST ignore a Range header field that contains a range unit it does not understand.  A proxy MAY discard a Range header field that contains a range unit it does not understand.
A server that supports range requests MAY ignore or reject a Range header field that consists of more than two overlapping ranges, or a set of many small ranges that are not listed in ascending order, since both are indications of either a broken client or a deliberate denial-of-service attack (<a href="#section-6.1">Section 6.1</a>).  A client SHOULD NOT request multiple ranges that are inherently less efficient to process and transfer than a single range that encompasses the same data.
A client that is requesting multiple ranges SHOULD list those ranges in ascending order (the order in which they would typically be received in a complete representation) unless there is a specific need to request a later part earlier.  For example, a user agent processing a large representation with an internal catalog of parts might need to request later parts first, particularly if the representation consists of pages stored in reverse order and the user agent wishes to transfer one page at a time.
The Range header field is evaluated after evaluating the precondition header fields defined in [<a href="/doc/html/rfc7232" title="&quot;Hypertext Transfer Protocol (HTTP/1.1): Conditional Requests&quot;">RFC7232</a>], and only if the result in absence of the Range header field would be a 200 (OK) response.  In other words, Range is ignored when a conditional GET would result in a 304 (Not Modified) response. The If-Range header field (<a href="#section-3.2">Section 3.2</a>) can be used as a precondition to applying the Range header field.
If all of the preconditions are true, the server supports the Range header field for the target resource, and the specified range(s) are valid and satisfiable (as defined in <a href="#section-2.1">Section 2.1</a>), the server SHOULD send a 206 (Partial Content) response with a payload containing one or more partial representations that correspond to the satisfiable ranges requested, as defined in <a href="#section-4">Section 4</a>.
If all of the preconditions are true, the server supports the Range header field for the target resource, and the specified range(s) are invalid or unsatisfiable, the server SHOULD send a 416 (Range Not Satisfiable) response.
If a client has a partial copy of a representation and wishes to have an up-to-date copy of the entire representation, it could use the Range header field with a conditional GET (using either or both of If-Unmodified-Since and If-Match.)  However, if the precondition fails because the representation has been modified, the client would then have to make a second request to obtain the entire current representation.
The &quot;If-Range&quot; header field allows a client to &quot;short-circuit&quot; the second request.  Informally, its meaning is as follows: if the representation is unchanged, send me the part(s) that I am requesting in Range; otherwise, send me the entire representation.
A client MUST NOT generate an If-Range header field in a request that does not contain a Range header field.  A server MUST ignore an If-Range header field received in a request that does not contain a Range header field.  An origin server MUST ignore an If-Range header field received in a request for a target resource that does not support Range requests.
A client MUST NOT generate an If-Range header field containing an entity-tag that is marked as weak.  A client MUST NOT generate an If-Range header field containing an HTTP-date unless the client has no entity-tag for the corresponding representation and the date is a strong validator in the sense defined by <a href="/doc/html/rfc7232#section-2.2.2">Section&nbsp;2.2.2 of [RFC7232]</a>.
A server that evaluates an If-Range precondition MUST use the strong comparison function when comparing entity-tags (<a href="/doc/html/rfc7232#section-2.3.2">Section&nbsp;2.3.2 of [RFC7232]</a>) and MUST evaluate the condition as false if an HTTP-date validator is provided that is not a strong validator in the sense defined by <a href="/doc/html/rfc7232#section-2.2.2">Section&nbsp;2.2.2 of [RFC7232]</a>.  A valid entity-tag can be distinguished from a valid HTTP-date by examining the first two characters for a DQUOTE.
If the validator given in the If-Range header field matches the current validator for the selected representation of the target resource, then the server SHOULD process the Range header field as requested.  If the validator does not match, the server MUST ignore the Range header field.  Note that this comparison by exact match, including when the validator is an HTTP-date, differs from the &quot;earlier than or equal to&quot; comparison used when evaluating an If-Unmodified-Since conditional.
The 206 (Partial Content) status code indicates that the server is successfully fulfilling a range request for the target resource by transferring one or more parts of the selected representation that correspond to the satisfiable ranges found in the request&#x27;s Range header field (<a href="#section-3.1">Section 3.1</a>).
bytes of partial image data ...
When multiple ranges are requested, a server MAY coalesce any of the ranges that overlap, or that are separated by a gap that is smaller than the overhead of sending multiple parts, regardless of the order in which the corresponding byte-range-spec appeared in the received Range header field.  Since the typical overhead between parts of a multipart/byteranges payload is around 80 bytes, depending on the selected representation&#x27;s media type and the chosen boundary parameter length, it can be less efficient to transfer many small disjoint parts than it is to transfer the entire selected representation.
A server MUST NOT generate a multipart response to a request for a single range, since a client that does not request multiple parts might not support multipart responses.  However, a server MAY generate a multipart/byteranges payload with only a single body part if multiple ranges were requested and only one range was found to be satisfiable or only one range remained after coalescing.  A client that cannot process a multipart/byteranges response MUST NOT generate a request that asks for multiple ranges.
When a multipart response payload is generated, the server SHOULD send the parts in the same order that the corresponding byte-range-spec appeared in the received Range header field, excluding those ranges that were deemed unsatisfiable or that were coalesced into other ranges.  A client that receives a multipart response MUST inspect the Content-Range header field present in each body part in order to determine which range is contained in that body part; a client cannot rely on receiving the same ranges that it requested, nor the same order that it requested.
When a 206 response is generated, the server MUST generate the following header fields, in addition to those required above, if the field would have been sent in a 200 (OK) response to the same request: Date, Cache-Control, ETag, Expires, Content-Location, and Vary.
If a 206 is generated in response to a request with an If-Range header field, the sender SHOULD NOT generate other representation header fields beyond those required above, because the client is understood to already have a prior response containing those header fields.  Otherwise, the sender MUST generate all of the representation header fields that would have been sent in a 200 (OK) response to the same request.
A 206 response is cacheable by default; i.e., unless otherwise indicated by explicit cache controls (see <a href="/doc/html/rfc7234#section-4.2.2">Section&nbsp;4.2.2 of [RFC7234]</a>).
The &quot;Content-Range&quot; header field is sent in a single part 206 (Partial Content) response to indicate the partial range of the selected representation enclosed as the message payload, sent in each part of a multipart 206 response to indicate the range enclosed within each body part, and sent in 416 (Range Not Satisfiable) responses to provide information about the selected representation.
For byte ranges, a sender SHOULD indicate the complete length of the representation from which the range has been extracted, unless the complete length is unknown or difficult to determine.  An asterisk character (&quot;*&quot;) in place of the complete-length indicates that the representation length was unknown when the header field was generated.
A Content-Range field value is invalid if it contains a byte-range-resp that has a last-byte-pos value less than its first-byte-pos value, or a complete-length value less than or equal to its last-byte-pos value.  The recipient of an invalid Content-Range MUST NOT attempt to recombine the received content with a stored representation.
The complete-length in a 416 response indicates the current length of the selected representation.
A response might transfer only a subrange of a representation if the connection closed prematurely or if the request used one or more Range specifications.  After several such transfers, a client might have received several ranges of the same representation.  These ranges can only be safely combined if they all have in common the same strong validator (<a href="/doc/html/rfc7232#section-2.1">Section&nbsp;2.1 of [RFC7232]</a>).
A client that has received multiple partial responses to GET requests on a target resource MAY combine those responses into a larger continuous range if they share the same strong validator.
If the most recent response is an incomplete 200 (OK) response, then the header fields of that response are used for any combined response and replace those of the matching stored responses.
If the most recent response is a 206 (Partial Content) response and at least one of the matching stored responses is a 200 (OK), then the combined response header fields consist of the most recent 200 response&#x27;s header fields.  If all of the matching stored responses are 206 responses, then the stored response with the most recent header fields is used as the source of header fields for the combined response, except that the client MUST use other header fields provided in the new response, aside from Content-Range, to replace all instances of the corresponding header fields in the stored response. The combined response message body consists of the union of partial content ranges in the new response and each of the selected responses.  If the union consists of the entire range of the representation, then the client MUST process the combined response as if it were a complete 200 (OK) response, including a Content-Length header field that reflects the complete length.  Otherwise, the client MUST process the set of continuous ranges as one of the following: an incomplete 200 (OK) response if the combined response is a prefix of the representation, a single 206 (Partial Content) response containing a multipart/byteranges body, or multiple 206 (Partial Content) responses, each with one continuous range that is indicated by a Content-Range header field.
The 416 (Range Not Satisfiable) status code indicates that none of the ranges in the request&#x27;s Range header field (<a href="#section-3.1">Section 3.1</a>) overlap the current extent of the selected resource or that the set of ranges requested has been rejected due to invalid ranges or an excessive request of small or overlapping ranges.
For byte ranges, failing to overlap the current extent means that the first-byte-pos of all of the byte-range-spec values were greater than the current length of the selected representation.  When this status code is generated in response to a byte-range request, the sender SHOULD generate a Content-Range header field specifying the current length of the selected representation (<a href="#section-4.2">Section 4.2</a>).
Note: Because servers are free to ignore Range, many implementations will simply respond with the entire selected representation in a 200 (OK) response.  That is partly because most clients are prepared to receive a 200 (OK) to complete the task (albeit less efficiently) and partly because clients might not stop making an invalid partial request until they have received a complete representation.  Thus, clients cannot depend on receiving a 416 (Range Not Satisfiable) response even when it is most appropriate.
The &quot;HTTP Range Unit Registry&quot; defines the namespace for the range unit names and refers to their corresponding specifications.  The registry has been created and is now maintained at &lt;<a href="http://www.iana.org/assignments/http-parameters">http://www.iana.org/assignments/http-parameters</a>&gt;.
Values to be added to this namespace require IETF Review (see <a href="/doc/html/rfc5226#section-4.1">[RFC5226], Section&nbsp;4.1</a>).
The change controller is: &quot;IETF (iesg@ietf.org) - Internet Engineering Task Force&quot;.
HTTP header fields are registered within the &quot;Message Headers&quot; registry maintained at &lt;<a href="http://www.iana.org/assignments/message-headers/">http://www.iana.org/assignments/message-headers/</a>&gt;.
The change controller is: &quot;IETF (iesg@ietf.org) - Internet Engineering Task Force&quot;.
IANA maintains the registry of Internet media types [<a href="#ref-BCP13" title="&quot;Media Type Specifications and Registration Procedures&quot;">BCP13</a>] at &lt;<a href="http://www.iana.org/assignments/media-types">http://www.iana.org/assignments/media-types</a>&gt;.
This document serves as the specification for the Internet media type &quot;multipart/byteranges&quot;.  The following has been registered with IANA.
Published specification:  This specification (see <a href="#appendix-A">Appendix A</a>).
Applications that use this media type:  HTTP components supporting multiple ranges in a single request.
Person and email address to contact for further information:  See Authors&#x27; Addresses section.
Author:  See Authors&#x27; Addresses section.
This section is meant to inform developers, information providers, and users of known security concerns specific to the HTTP range request mechanisms.  More general security considerations are addressed in HTTP messaging [<a href="/doc/html/rfc7230" title="&quot;Hypertext Transfer Protocol (HTTP/1.1): Message Syntax and Routing&quot;">RFC7230</a>] and semantics [<a href="/doc/html/rfc7231" title="&quot;Hypertext Transfer Protocol (HTTP/1.1): Semantics and Content&quot;">RFC7231</a>].
Unconstrained multiple range requests are susceptible to denial-of- service attacks because the effort required to request many overlapping ranges of the same data is tiny compared to the time, memory, and bandwidth consumed by attempting to serve the requested data in many parts.  Servers ought to ignore, coalesce, or reject egregious range requests, such as requests for more than two overlapping ranges or for many small ranges in a single set, particularly when the ranges are requested out of order for no apparent reason.  Multipart range requests are not designed to support random access.
See <a href="/doc/html/rfc7230#section-10">Section&nbsp;10 of [RFC7230]</a>.
When a 206 (Partial Content) response message includes the content of multiple ranges, they are transmitted as body parts in a multipart message body (<a href="/doc/html/rfc2046#section-5.1">[RFC2046], Section&nbsp;5.1</a>) with the media type of &quot;multipart/byteranges&quot;.
The multipart/byteranges media type includes one or more body parts, each with its own Content-Type and Content-Range fields.  The required boundary parameter specifies the boundary string used to separate each body part.
Additional CRLFs might precede the first boundary string in the body.
Although [<a href="/doc/html/rfc2046" title="&quot;Multipurpose Internet Mail Extensions (MIME) Part Two: Media Types&quot;">RFC2046</a>] permits the boundary string to be quoted, some existing implementations handle a quoted boundary string incorrectly.
A number of clients and servers were coded to an early draft of the byteranges specification that used a media type of multipart/ x-byteranges, which is almost (but not quite) compatible with this type.
The following core rules are included by reference, as defined in <a href="/doc/html/rfc5234#appendix-B.1">Appendix&nbsp;B.1 of [RFC5234]</a>: ALPHA (letters), CR (carriage return), CRLF (CR LF), CTL (controls), DIGIT (decimal 0-9), DQUOTE (double quote), HEXDIG (hexadecimal 0-9/A-F/a-f), LF (line feed), OCTET (any 8-bit sequence of data), SP (space), and VCHAR (any visible US-ASCII character).
Note that all rules derived from token are to be compared case-insensitively, like range-unit and acceptable-ranges.
In the collected ABNF below, list rules are expanded as per <a href="/doc/html/rfc7230#section-1.2">Section</a> <a href="/doc/html/rfc7230#section-1.2">1.2 of [RFC7230]</a>.
