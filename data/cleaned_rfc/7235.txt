HTTP provides a general framework for access control and authentication, via an extensible set of challenge-response authentication schemes, which can be used by a server to challenge a client request and by a client to provide authentication information. This document defines HTTP/1.1 authentication in terms of the architecture defined in &quot;Hypertext Transfer Protocol (HTTP/1.1): Message Syntax and Routing&quot; [<a href="/doc/html/rfc7230" title="&quot;Hypertext Transfer Protocol (HTTP/1.1): Message Syntax and Routing&quot;">RFC7230</a>], including the general framework previously described in &quot;HTTP Authentication: Basic and Digest Access Authentication&quot; [<a href="/doc/html/rfc2617" title="&quot;HTTP Authentication: Basic and Digest Access Authentication&quot;">RFC2617</a>] and the related fields and status codes previously defined in &quot;Hypertext Transfer Protocol -- HTTP/1.1&quot; [<a href="/doc/html/rfc2616" title="&quot;Hypertext Transfer Protocol -- HTTP/1.1&quot;">RFC2616</a>].
The IANA Authentication Scheme Registry (<a href="#section-5.1">Section 5.1</a>) lists registered authentication schemes and their corresponding specifications, including the &quot;basic&quot; and &quot;digest&quot; authentication schemes previously defined by <a href="/doc/html/rfc2617">RFC 2617</a>.
The key words &quot;MUST&quot;, &quot;MUST NOT&quot;, &quot;REQUIRED&quot;, &quot;SHALL&quot;, &quot;SHALL NOT&quot;, &quot;SHOULD&quot;, &quot;SHOULD NOT&quot;, &quot;RECOMMENDED&quot;, &quot;MAY&quot;, and &quot;OPTIONAL&quot; in this document are to be interpreted as described in [<a href="/doc/html/rfc2119" title="&quot;Key words for use in RFCs to Indicate Requirement Levels&quot;">RFC2119</a>].
Conformance criteria and considerations regarding error handling are defined in <a href="/doc/html/rfc7230#section-2.5">Section&nbsp;2.5 of [RFC7230]</a>.
This specification uses the Augmented Backus-Naur Form (ABNF) notation of [<a href="/doc/html/rfc5234" title="&quot;Augmented BNF for Syntax Specifications: ABNF&quot;">RFC5234</a>] with a list extension, defined in <a href="/doc/html/rfc7230#section-7">Section&nbsp;7 of [RFC7230]</a>, that allows for compact definition of comma-separated lists using a &#x27;#&#x27; operator (similar to how the &#x27;*&#x27; operator indicates repetition).  <a href="#appendix-B">Appendix B</a> describes rules imported from other documents.  <a href="#appendix-C">Appendix C</a> shows the collected grammar with all list operators expanded to standard ABNF notation.
HTTP provides a simple challenge-response authentication framework that can be used by a server to challenge a client request and by a client to provide authentication information.  It uses a case- insensitive token as a means to identify the authentication scheme, followed by additional information necessary for achieving authentication via that scheme.  The latter can be either a comma- separated list of parameters or a single sequence of characters capable of holding base64-encoded information.
Authentication parameters are name=value pairs, where the name token is matched case-insensitively, and each parameter name MUST only occur once per challenge.
The token68 syntax allows the 66 unreserved URI characters ([<a href="/doc/html/rfc3986" title="&quot;Uniform Resource Identifier (URI): Generic Syntax&quot;">RFC3986</a>]), plus a few others, so that it can hold a base64, base64url (URL and filename safe alphabet), base32, or base16 (hex) encoding, with or without padding, but excluding whitespace ([<a href="/doc/html/rfc4648" title="&quot;The Base16, Base32, and Base64 Data Encodings&quot;">RFC4648</a>]).
A 401 (Unauthorized) response message is used by an origin server to challenge the authorization of a user agent, including a WWW-Authenticate header field containing at least one challenge applicable to the requested resource.
A 407 (Proxy Authentication Required) response message is used by a proxy to challenge the authorization of a client, including a Proxy-Authenticate header field containing at least one challenge applicable to the proxy for the requested resource.
Note: Many clients fail to parse a challenge that contains an unknown scheme.  A workaround for this problem is to list well- supported schemes (such as &quot;basic&quot;) first.
A user agent that wishes to authenticate itself with an origin server -- usually, but not necessarily, after receiving a 401 (Unauthorized) -- can do so by including an Authorization header field with the request.
A client that wishes to authenticate itself with a proxy -- usually, but not necessarily, after receiving a 407 (Proxy Authentication Required) -- can do so by including a Proxy-Authorization header field with the request. Both the Authorization field value and the Proxy-Authorization field value contain the client&#x27;s credentials for the realm of the resource being requested, based upon a challenge received in a response (possibly at some point in the past).  When creating their values, the user agent ought to do so by selecting the challenge with what it considers to be the most secure auth-scheme that it understands, obtaining credentials from the user as appropriate.  Transmission of credentials within header field values implies significant security considerations regarding the confidentiality of the underlying connection, as described in <a href="#section-6.1">Section 6.1</a>.
Upon receipt of a request for a protected resource that omits credentials, contains invalid credentials (e.g., a bad password) or partial credentials (e.g., when the authentication scheme requires more than one round trip), an origin server SHOULD send a 401 (Unauthorized) response that contains a WWW-Authenticate header field with at least one (possibly new) challenge applicable to the requested resource.
Likewise, upon receipt of a request that omits proxy credentials or contains invalid or partial proxy credentials, a proxy that requires authentication SHOULD generate a 407 (Proxy Authentication Required) response that contains a Proxy-Authenticate header field with at least one (possibly new) challenge applicable to the proxy.
A server that receives valid credentials that are not adequate to gain access ought to respond with the 403 (Forbidden) status code (<a href="/doc/html/rfc7231#section-6.5.3">Section&nbsp;6.5.3 of [RFC7231]</a>).
HTTP does not restrict applications to this simple challenge-response framework for access authentication.  Additional mechanisms can be used, such as authentication at the transport level or via message encapsulation, and with additional header fields specifying authentication information.  However, such additional mechanisms are not defined by this specification.
The &quot;realm&quot; authentication parameter is reserved for use by authentication schemes that wish to indicate a scope of protection.
A protection space is defined by the canonical root URI (the scheme and authority components of the effective request URI; see <a href="/doc/html/rfc7230#section-5.5">Section</a> <a href="/doc/html/rfc7230#section-5.5">5.5 of [RFC7230]</a>) of the server being accessed, in combination with the realm value if present.  These realms allow the protected resources on a server to be partitioned into a set of protection spaces, each with its own authentication scheme and/or authorization database.  The realm value is a string, generally assigned by the origin server, that can have additional semantics specific to the authentication scheme.  Note that a response can have multiple challenges with the same auth-scheme but with different realms.
The protection space determines the domain over which credentials can be automatically applied.  If a prior request has been authorized, the user agent MAY reuse the same credentials for all other requests within that protection space for a period of time determined by the authentication scheme, parameters, and/or user preferences (such as a configurable inactivity timeout).  Unless specifically allowed by the authentication scheme, a single protection space cannot extend outside the scope of its server.
For historical reasons, a sender MUST only generate the quoted-string syntax.  Recipients might have to support both token and quoted-string syntax for maximum interoperability with existing clients that have been accepting both notations for a long time.
The 401 (Unauthorized) status code indicates that the request has not been applied because it lacks valid authentication credentials for the target resource.  The server generating a 401 response MUST send a WWW-Authenticate header field (<a href="#section-4.1">Section 4.1</a>) containing at least one challenge applicable to the target resource.
If the request included authentication credentials, then the 401 response indicates that authorization has been refused for those credentials.  The user agent MAY repeat the request with a new or replaced Authorization header field (<a href="#section-4.2">Section 4.2</a>).  If the 401 response contains the same challenge as the prior response, and the user agent has already attempted authentication at least once, then the user agent SHOULD present the enclosed representation to the user, since it usually contains relevant diagnostic information.
The 407 (Proxy Authentication Required) status code is similar to 401 (Unauthorized), but it indicates that the client needs to authenticate itself in order to use a proxy.  The proxy MUST send a Proxy-Authenticate header field (<a href="#section-4.3">Section 4.3</a>) containing a challenge applicable to that proxy for the target resource.  The client MAY repeat the request with a new or replaced Proxy-Authorization header field (<a href="#section-4.4">Section 4.4</a>).
This section defines the syntax and semantics of header fields related to the HTTP authentication framework.
The &quot;WWW-Authenticate&quot; header field indicates the authentication scheme(s) and parameters applicable to the target resource.
A server generating a 401 (Unauthorized) response MUST send a WWW-Authenticate header field containing at least one challenge.  A server MAY generate a WWW-Authenticate header field in other response messages to indicate that supplying credentials (or different credentials) might affect the response.
A proxy forwarding a response MUST NOT modify any WWW-Authenticate fields in that response.
User agents are advised to take special care in parsing the field value, as it might contain more than one challenge, and each challenge can contain a comma-separated list of authentication parameters.  Furthermore, the header field itself can occur multiple times.
This header field contains two challenges; one for the &quot;Newauth&quot; scheme with a realm value of &quot;apps&quot;, and two additional parameters &quot;type&quot; and &quot;title&quot;, and another one for the &quot;Basic&quot; scheme with a realm value of &quot;simple&quot;.
Note: The challenge grammar production uses the list syntax as well.  Therefore, a sequence of comma, whitespace, and comma can be considered either as applying to the preceding challenge, or to be an empty entry in the list of challenges.  In practice, this ambiguity does not affect the semantics of the header field value and thus is harmless.
The &quot;Authorization&quot; header field allows a user agent to authenticate itself with an origin server -- usually, but not necessarily, after receiving a 401 (Unauthorized) response.  Its value consists of credentials containing the authentication information of the user agent for the realm of the resource being requested.
If a request is authenticated and a realm specified, the same credentials are presumed to be valid for all other requests within this realm (assuming that the authentication scheme itself does not require otherwise, such as credentials that vary according to a challenge value or using synchronized clocks).
A proxy forwarding a request MUST NOT modify any Authorization fields in that request.  See <a href="/doc/html/rfc7234#section-3.2">Section&nbsp;3.2 of [RFC7234]</a> for details of and requirements pertaining to handling of the Authorization field by HTTP caches.
The &quot;Proxy-Authenticate&quot; header field consists of at least one challenge that indicates the authentication scheme(s) and parameters applicable to the proxy for this effective request URI (<a href="/doc/html/rfc7230#section-5.5">Section&nbsp;5.5 of [RFC7230]</a>).  A proxy MUST send at least one Proxy-Authenticate header field in each 407 (Proxy Authentication Required) response that it generates.
Unlike WWW-Authenticate, the Proxy-Authenticate header field applies only to the next outbound client on the response chain.  This is because only the client that chose a given proxy is likely to have the credentials necessary for authentication.  However, when multiple proxies are used within the same administrative domain, such as office and regional caching proxies within a large corporate network, it is common for credentials to be generated by the user agent and passed through the hierarchy until consumed.  Hence, in such a configuration, it will appear as if Proxy-Authenticate is being forwarded because each proxy will send the same challenge set.
Note that the parsing considerations for WWW-Authenticate apply to this header field as well; see <a href="#section-4.1">Section 4.1</a> for details.
The &quot;Proxy-Authorization&quot; header field allows the client to identify itself (or its user) to a proxy that requires authentication.  Its value consists of credentials containing the authentication information of the client for the proxy and/or realm of the resource being requested.
Unlike Authorization, the Proxy-Authorization header field applies only to the next inbound proxy that demanded authentication using the Proxy-Authenticate field.  When multiple proxies are used in a chain, the Proxy-Authorization header field is consumed by the first inbound proxy that was expecting to receive credentials.  A proxy MAY relay the credentials from the client request to the next proxy if that is the mechanism by which the proxies cooperatively authenticate a given request.
The &quot;Hypertext Transfer Protocol (HTTP) Authentication Scheme Registry&quot; defines the namespace for the authentication schemes in challenges and credentials.  It has been created and is now maintained at &lt;<a href="http://www.iana.org/assignments/http-authschemes">http://www.iana.org/assignments/http-authschemes</a>&gt;.
Values to be added to this namespace require IETF Review (see <a href="/doc/html/rfc5226#section-4.1">[RFC5226], Section&nbsp;4.1</a>).
o  HTTP authentication is presumed to be stateless: all of the information necessary to authenticate a request MUST be provided in the request, rather than be dependent on the server remembering prior requests.  Authentication based on, or bound to, the underlying connection is outside the scope of this specification and inherently flawed unless steps are taken to ensure that the connection cannot be used by any party other than the authenticated user (see <a href="/doc/html/rfc7230#section-2.3">Section&nbsp;2.3 of [RFC7230]</a>).
o  The authentication parameter &quot;realm&quot; is reserved for defining protection spaces as described in <a href="#section-2.2">Section 2.2</a>.  New schemes MUST NOT use it in a way incompatible with that definition.
o  The &quot;token68&quot; notation was introduced for compatibility with existing authentication schemes and can only be used once per challenge or credential.  Thus, new schemes ought to use the auth-param syntax instead, because otherwise future extensions will be impossible.
o  The parsing of challenges and credentials is defined by this specification and cannot be modified by new authentication schemes.  When the auth-param syntax is used, all parameters ought to support both token and quoted-string syntax, and syntactical constraints ought to be defined on the field value after parsing (i.e., quoted-string processing).  This is necessary so that recipients can use a generic parser that applies to all authentication schemes.
Note: The fact that the value syntax for the &quot;realm&quot; parameter is restricted to quoted-string was a bad design choice not to be repeated for new parameters.
o  Definitions of new schemes ought to define the treatment of unknown extension parameters.  In general, a &quot;must-ignore&quot; rule is preferable to a &quot;must-understand&quot; rule, because otherwise it will be hard to introduce new parameters in the presence of legacy recipients.  Furthermore, it&#x27;s good to describe the policy for defining new parameters (such as &quot;update the specification&quot; or &quot;use this registry&quot;).
o  Authentication schemes need to document whether they are usable in origin-server authentication (i.e., using WWW-Authenticate), and/or proxy authentication (i.e., using Proxy-Authenticate). o  The credentials carried in an Authorization header field are specific to the user agent and, therefore, have the same effect on HTTP caches as the &quot;private&quot; Cache-Control response directive (<a href="/doc/html/rfc7234#section-5.2.2.6">Section&nbsp;5.2.2.6 of [RFC7234]</a>), within the scope of the request in which they appear.
Therefore, new authentication schemes that choose not to carry credentials in the Authorization header field (e.g., using a newly defined header field) will need to explicitly disallow caching, by mandating the use of either Cache-Control request directives (e.g., &quot;no-store&quot;, <a href="/doc/html/rfc7234#section-5.2.1.5">Section&nbsp;5.2.1.5 of [RFC7234]</a>) or response directives (e.g., &quot;private&quot;).
HTTP header fields are registered within the &quot;Message Headers&quot; registry maintained at &lt;<a href="http://www.iana.org/assignments/message-headers/">http://www.iana.org/assignments/message-headers/</a>&gt;.
This document defines the following HTTP header fields, so the &quot;Permanent Message Header Field Names&quot; registry has been updated accordingly (see [<a href="#ref-BCP90" title="&quot;Registration Procedures for Message Header Fields&quot;">BCP90</a>]).
The change controller is: &quot;IETF (iesg@ietf.org) - Internet Engineering Task Force&quot;.
This section is meant to inform developers, information providers, and users of known security concerns specific to HTTP authentication. More general security considerations are addressed in HTTP messaging [<a href="/doc/html/rfc7230" title="&quot;Hypertext Transfer Protocol (HTTP/1.1): Message Syntax and Routing&quot;">RFC7230</a>] and semantics [<a href="/doc/html/rfc7231" title="&quot;Hypertext Transfer Protocol (HTTP/1.1): Semantics and Content&quot;">RFC7231</a>].
Everything about the topic of HTTP authentication is a security consideration, so the list of considerations below is not exhaustive. Furthermore, it is limited to security considerations regarding the authentication framework, in general, rather than discussing all of the potential considerations for specific authentication schemes (which ought to be documented in the specifications that define those schemes).  Various organizations maintain topical information and links to current research on Web application security (e.g., [<a href="#ref-OWASP" title="&quot;A Guide to Building Secure Web Applications and Web Services&quot;">OWASP</a>]), including common pitfalls for implementing and using the authentication schemes found in practice.
The HTTP authentication framework does not define a single mechanism for maintaining the confidentiality of credentials; instead, each authentication scheme defines how the credentials are encoded prior to transmission.  While this provides flexibility for the development of future authentication schemes, it is inadequate for the protection of existing schemes that provide no confidentiality on their own, or that do not sufficiently protect against replay attacks. Furthermore, if the server expects credentials that are specific to each individual user, the exchange of those credentials will have the effect of identifying that user even if the content within credentials remains confidential.
HTTP depends on the security properties of the underlying transport- or session-level connection to provide confidential transmission of header fields.  In other words, if a server limits access to authenticated users using this framework, the server needs to ensure that the connection is properly secured in accordance with the nature of the authentication scheme used.  For example, services that depend on individual user authentication often require a connection to be secured with TLS (&quot;Transport Layer Security&quot;, [<a href="/doc/html/rfc5246" title="&quot;The Transport Layer Security (TLS) Protocol Version 1.2&quot;">RFC5246</a>]) prior to exchanging any credentials.
Existing HTTP clients and user agents typically retain authentication information indefinitely.  HTTP does not provide a mechanism for the origin server to direct clients to discard these cached credentials, since the protocol has no awareness of how credentials are obtained or managed by the user agent.  The mechanisms for expiring or revoking credentials can be specified as part of an authentication scheme definition.
o  Clients that have been idle for an extended period, following which the server might wish to cause the client to re-prompt the user for credentials.
o  Applications that include a session termination indication (such as a &quot;logout&quot; or &quot;commit&quot; button on a page) after which the server side of the application &quot;knows&quot; that there is no further reason for the client to retain the credentials.
User agents that cache credentials are encouraged to provide a readily accessible mechanism for discarding cached credentials under user control.
Authentication schemes that solely rely on the &quot;realm&quot; mechanism for establishing a protection space will expose credentials to all resources on an origin server.  Clients that have successfully made authenticated requests with a resource can use the same authentication credentials for other resources on the same origin server.  This makes it possible for a different resource to harvest authentication credentials for other resources.
This is of particular concern when an origin server hosts resources for multiple parties under the same canonical root URI (<a href="#section-2.2">Section 2.2</a>). Possible mitigation strategies include restricting direct access to authentication credentials (i.e., not making the content of the Authorization request header field available), and separating protection spaces by using a different host name (or port number) for each party.
This specification takes over the definition of the HTTP Authentication Framework, previously defined in <a href="/doc/html/rfc2617">RFC 2617</a>.  We thank John Franks, Phillip M. Hallam-Baker, Jeffery L. Hostetler, Scott D. Lawrence, Paul J. Leach, Ari Luotonen, and Lawrence C. Stewart for their work on that specification.  See <a href="/doc/html/rfc2617#section-6">Section&nbsp;6 of [RFC2617]</a> for further acknowledgements.
See <a href="/doc/html/rfc7230#section-10">Section&nbsp;10 of [RFC7230]</a> for the Acknowledgments related to this document revision.
The framework for HTTP Authentication is now defined by this document, rather than <a href="/doc/html/rfc2617">RFC 2617</a>.
The following core rules are included by reference, as defined in <a href="/doc/html/rfc5234#appendix-B.1">Appendix&nbsp;B.1 of [RFC5234]</a>: ALPHA (letters), CR (carriage return), CRLF (CR LF), CTL (controls), DIGIT (decimal 0-9), DQUOTE (double quote), HEXDIG (hexadecimal 0-9/A-F/a-f), LF (line feed), OCTET (any 8-bit sequence of data), SP (space), and VCHAR (any visible US-ASCII character).
In the collected ABNF below, list rules are expanded as per <a href="/doc/html/rfc7230#section-1.2">Section</a> <a href="/doc/html/rfc7230#section-1.2">1.2 of [RFC7230]</a>.
