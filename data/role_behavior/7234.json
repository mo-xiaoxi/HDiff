[
    {
        "if": {},
        "result": {},
        "role": "client",
        "origin": "Any client or server MAY employ a cache, though a cache cannot be used by a server that is acting as a tunnel."
    },
    {
        "if": [
            {}
        ],
        "result": [],
        "role": "cache",
        "origin": "If a cache receives a delta-seconds value greater than the greatest integer it can represent, or if any of its subsequent calculations overflows, the cache MUST consider the value to be either 2147483648 (2^31) or the greatest positive integer it can conveniently represent."
    },
    {
        "if": {},
        "result": {},
        "role": "cache",
        "origin": "A cache MUST NOT store a response to any request, unless: o"
    },
    {
        "if": [],
        "result": [],
        "role": "cache",
        "origin": "If the request method is GET, the response status code is 200 (OK), and the entire response header section has been received, a cache MAY store an incomplete response message body if the cache entry is recorded as incomplete."
    },
    {
        "if": [
            {
                "not_exists": "Content-Range"
            }
        ],
        "result": [
            {}
        ],
        "role": "cache",
        "origin": "However, a cache MUST NOT store incomplete or partial-content responses if it does not support the Range and Content-Range header fields or if it does not understand the range units used in those fields."
    },
    {
        "if": {
            "not_final": "response"
        },
        "result": {},
        "role": "cache",
        "origin": "A cache MAY complete a stored incomplete response by making a subsequent range request ([RFC7233]) and combining the successful response with the stored entry, as defined in Section 3.3."
    },
    {
        "if": {},
        "result": {},
        "role": "cache",
        "origin": "A cache MUST NOT use an incomplete response to answer requests unless the response has been made complete or the request is partial and specifies a range that is wholly within the incomplete response."
    },
    {
        "if": {},
        "result": {
            "status_code": "206"
        },
        "role": "cache",
        "origin": "A cache MUST NOT send a partial response to a client without explicitly marking it as such using the 206 (Partial Content) status code."
    },
    {
        "if": {},
        "result": {},
        "role": "cache",
        "origin": "A shared cache MUST NOT use a cached response to a request with an Authorization header field (Section\u00a04.2 of [RFC7235]) to satisfy any subsequent request unless a cache directive that allows such responses to be stored is present in the response."
    },
    {
        "if": {},
        "result": {},
        "role": "cache",
        "origin": "When presented with a request, a cache MUST NOT reuse a stored response, unless: o"
    },
    {
        "if": {
            "exist": "unsafe"
        },
        "result": {},
        "role": "cache",
        "origin": "A cache MUST write through requests with methods that are unsafe (Section\u00a04.2.1 of [RFC7231]) to the origin server; i.e., a cache is not allowed to generate a reply to such a request before having forwarded the request and having received a corresponding response."
    },
    {
        "if": {},
        "result": {},
        "role": "cache",
        "origin": "A cache that does not have a clock available MUST NOT use stored responses without revalidating them upon every use."
    },
    {
        "if": [
            {
                "exist": "date"
            }
        ],
        "result": [
            {}
        ],
        "role": "recipient",
        "origin": "If a cache recipient's internal implementation of time has less resolution than the value of an HTTP-date, the recipient MUST internally represent a parsed Expires date as the nearest time equal to or earlier than the received value."
    },
    {
        "if": {},
        "result": {},
        "role": "recipient",
        "origin": "A cache recipient MUST NOT allow local time zones to influence the calculation or comparison of an age or expiration time."
    },
    {
        "if": {},
        "result": {},
        "role": "recipient",
        "origin": "A cache recipient SHOULD consider a date with a zone abbreviation other than GMT or UTC to be invalid for calculating expiration."
    },
    {
        "if": {
            "exist": "Last-Modified"
        },
        "result": {},
        "role": "cache",
        "origin": "Since origin servers do not always provide explicit expiration times, a cache MAY assign a heuristic expiration time when an explicit time is not specified, employing algorithms that use other header field values (such as the Last-Modified time) to estimate a plausible expiration time."
    },
    {
        "if": {},
        "result": {},
        "role": "cache",
        "origin": "A cache MUST NOT use heuristics to determine freshness when an explicit expiration time is present in the stored response."
    },
    {
        "if": [],
        "result": [
            {
                "status_code": "113"
            }
        ],
        "role": "cache",
        "origin": "When a heuristic is used to calculate freshness lifetime, a cache SHOULD generate a Warning header field with a 113 warn-code (see Section 5.5.4) in the response if its current_age is more than 24 hours and such a warning is not already present."
    },
    {
        "if": [
            {
                "exist": "protocol"
            },
            {
                "exist": "protocol"
            },
            {
                "exist": "protocol"
            },
            {
                "exist": "protocol"
            }
        ],
        "result": [],
        "role": "cache",
        "origin": "A cache MUST NOT generate a stale response if it is prohibited by an explicit in-protocol directive (e.g., by a \"no-store\" or \"no-cache\" cache directive, a \"must-revalidate\" cache-response-directive, or an applicable \"s-maxage\" or \"proxy-revalidate\" cache-response-directive; see Section 5.2.2)."
    },
    {
        "if": {},
        "result": {},
        "role": "cache",
        "origin": "A cache MUST NOT send stale responses unless it is disconnected (i.e., it cannot contact the origin server or otherwise find a forward path) or doing so is explicitly allowed (e.g., by the max-stale request directive; see Section 5.2.1)."
    },
    {
        "if": {
            "exist": "Warning"
        },
        "result": {
            "status_code": "110"
        },
        "role": "cache",
        "origin": "A cache SHOULD generate a Warning header field with the 110 warn-code (see Section 5.5.1) in stale responses."
    },
    {
        "if": [],
        "result": [],
        "role": "cache",
        "origin": "Likewise, a cache SHOULD generate a 112 warn-code (see Section 5.5.3) in stale responses if the cache is disconnected."
    },
    {
        "if": [
            {
                "not_first": "response"
            }
        ],
        "result": [],
        "role": "cache",
        "origin": "A cache SHOULD NOT generate a new Warning header field when forwarding a response that does not have an Age header field, even if the response is already stale."
    },
    {
        "if": {},
        "result": {},
        "role": "cache",
        "origin": "A cache MUST NOT evaluate server, found in a request with semantics that cannot be satisfied with a cached response, or applied to a target resource for which it has no stored responses; such preconditions are likely intended for some other (inbound) server."
    },
    {
        "if": {
            "exist": "entity-tag",
            "multiple": "entity-tag",
            "assign": "entity-tag"
        },
        "result": {},
        "role": "recipient",
        "origin": "If the field-value is \"*\", or if the field-value is a list of entity-tags and at least one of them matches the entity-tag of the selected stored response, a cache recipient SHOULD generate a 304 (Not Modified) response (using the metadata of the selected stored response) instead of sending that stored response."
    },
    {
        "if": {
            "exist": "If-None-Match"
        },
        "result": {},
        "role": "cache",
        "origin": "When a cache decides to revalidate its own stored responses for a request that contains an If-None-Match list of entity-tags, the cache MAY combine the received list with a list of entity-tags from its own stored set of responses (fresh or stale) and send the union of the two lists as a replacement If-None-Match header field value in the forwarded request."
    },
    {
        "if": [
            {
                "not_final": "response"
            }
        ],
        "result": [],
        "role": "cache",
        "origin": "If a stored response contains only partial content, the cache MUST NOT include its entity-tag in the union unless the request is for a range that would be fully satisfied by that partial stored response."
    },
    {
        "if": [
            {
                "exist": "ETag",
                "multiple": "tag"
            }
        ],
        "result": [
            {
                "status_code": "200"
            }
        ],
        "role": "cache",
        "origin": "If the response to the forwarded request is 304 (Not Modified) and has an ETag header field value with an entity-tag that is not in the client's list, the cache MUST generate a 200 (OK) response for the client by reusing its corresponding stored response, as updated by the 304 response metadata (Section 4.3.4)."
    },
    {
        "if": [],
        "result": [
            {
                "status_code": "304"
            },
            {
                "status_code": "304"
            }
        ],
        "role": "recipient",
        "origin": "A cache recipient SHOULD generate a 304 (Not Modified) response (using the metadata of the selected stored response) if one of the following cases is true: 1) the selected stored response has a Last-Modified field-value that is earlier than or equal to the conditional timestamp; 2) no Last-Modified field is present in the selected stored response, but it has a Date field-value that is earlier than or equal to the conditional timestamp; or, 3) neither Last-Modified nor Date is having been received at a time earlier than or equal to the conditional timestamp."
    },
    {
        "if": [],
        "result": [],
        "role": "cache",
        "origin": "If none of the stored responses contain the same strong validator, then the cache MUST NOT use the new response to update any stored responses."
    },
    {
        "if": [
            {
                "exist": "Content-Length"
            }
        ],
        "result": [],
        "role": "cache",
        "origin": "For each of the stored responses that could have been selected, if the stored response and HEAD response have matching values for any received validator fields (ETag and Last-Modified) and, if the HEAD response has a Content-Length header field, the value of Content-Length matches that of the stored response, the cache SHOULD update the stored response as described below; otherwise, the cache SHOULD consider the stored response to be stale."
    },
    {
        "if": {
            "exist": "Content-Location",
            "multiple": "Content-Location",
            "invalid": "unsafe"
        },
        "result": {},
        "role": "cache",
        "origin": "A cache MUST invalidate the effective Request URI (Section\u00a05.5 of [RFC7230]) as well as the URI(s) in the Location and Content-Location response header fields (if present) when a non-error status code is received in response to an unsafe request method."
    },
    {
        "if": [],
        "result": [
            {}
        ],
        "role": "cache",
        "origin": "However, a cache MUST NOT invalidate a URI from a Location or Content-Location response header field if the host part of that URI differs from the host part in the effective request URI (Section\u00a05.5 of [RFC7230])."
    },
    {
        "if": {
            "invalid": "safe"
        },
        "result": {},
        "role": "cache",
        "origin": "A cache MUST invalidate the effective request URI (Section\u00a05.5 of [RFC7230]) when it receives a non-error response to a request with a method whose safety is unknown."
    },
    {
        "if": {},
        "result": {},
        "role": "proxy",
        "origin": "A proxy, whether or not it implements a cache, MUST pass cache directives through in forwarded messages, regardless of their significance to that application, since the directives might be applicable to all recipients along the request/response chain."
    },
    {
        "if": {
            "not_exists": "quoted-string"
        },
        "result": {},
        "role": "sender",
        "origin": "A sender SHOULD NOT generate the quoted-string form."
    },
    {
        "if": {},
        "result": {},
        "role": "cache",
        "origin": "The \"no-cache\" request directive indicates that a cache MUST NOT use a stored response to satisfy the request without successful validation on the origin server."
    },
    {
        "if": {},
        "result": {},
        "role": "cache",
        "origin": "The \"no-store\" request directive indicates that a cache MUST NOT store any part of either this request or any response to it.\n\"MUST NOT store\" in this context means that the cache MUST NOT intentionally store the information in non-volatile storage, and MUST make a best-effort attempt to remove the information from volatile storage as promptly as possible after forwarding it."
    },
    {
        "if": {},
        "result": {},
        "role": "intermediary",
        "origin": "The \"no-transform\" request directive indicates that an intermediary (whether or not it implements a cache) MUST NOT transform the payload, as defined in Section\u00a05.7.2 of [RFC7230]."
    },
    {
        "if": [],
        "result": [
            {}
        ],
        "role": "cache",
        "origin": "If it receives this directive, a cache SHOULD either respond using a stored response that is consistent with the other constraints of the request, or respond with operated as a unified system with good internal connectivity, a member cache MAY forward such a request within that group of caches."
    },
    {
        "if": {
            "exist": "stale",
            "not_final": "response"
        },
        "result": {},
        "role": "cache",
        "origin": "The \"must-revalidate\" response directive indicates that once it has become stale, a cache MUST NOT use the response to satisfy subsequent requests without successful validation on the origin server."
    },
    {
        "if": [
            {
                "multiple": "response"
            }
        ],
        "result": [],
        "role": "cache",
        "origin": "If the no-cache response directive specifies one or more field-names, then a cache MAY use the response to satisfy a subsequent request, subject to any other restrictions on caching."
    },
    {
        "if": [],
        "result": [],
        "role": "sender",
        "origin": "sender SHOULD NOT generate the token form (even if quoting appears not to be needed for single-entry lists)."
    },
    {
        "if": {},
        "result": {},
        "role": "cache",
        "origin": "The \"no-store\" response directive indicates that a cache MUST NOT store any part of either the immediate request or response."
    },
    {
        "if": {
            "assign": "response"
        },
        "result": {},
        "role": "intermediary",
        "origin": "The \"no-transform\" response directive indicates that an intermediary (regardless of whether it implements a cache) MUST NOT transform the payload, as defined in Section\u00a05.7.2 of [RFC7230]."
    },
    {
        "if": [],
        "result": [],
        "role": "cache",
        "origin": "A private cache MAY store the response and reuse it for later requests, even if the response would normally be non-cacheable."
    },
    {
        "if": {},
        "result": {},
        "role": "cache",
        "origin": "That is, a shared cache MUST NOT store the specified field-names(s), whereas it MAY store the remainder of the response message."
    },
    {
        "if": [],
        "result": [],
        "role": "sender",
        "origin": "A sender SHOULD NOT generate the token form (even if quoting appears not to be needed for single-entry lists)."
    },
    {
        "if": {},
        "result": {},
        "role": "server",
        "origin": "An origin server without a clock MUST NOT generate an Expires field unless its value represents a fixed time in the past (always expired) or its value has been associated with the resource by a system or user with a reliable clock."
    },
    {
        "if": {
            "exist": "Cache-Control",
            "not_exists": "Cache-Control"
        },
        "result": {},
        "role": "caches",
        "origin": "When the Cache-Control header field is not present in a request, caches MUST consider the no-cache request pragma-directive as having the same effect as if \"Cache-Control: no-cache\" were present (see Section 5.2.1)."
    },
    {
        "if": {
            "exist": "Warning",
            "multiple": "Warning"
        },
        "result": {},
        "role": "agent",
        "origin": "A user agent that receives one or more Warning header fields SHOULD inform the user of as many of them as possible, in the order that they appear in the response."
    },
    {
        "if": {
            "exist": "Date",
            "multiple": "warning-value",
            "request_version": "HTTP/1.0"
        },
        "result": {
            "response_version": "HTTP/1.0"
        },
        "role": "sender",
        "origin": "sent to a recipient known to implement only HTTP/1.0, the sender MUST include in each corresponding warning-value a warn-date that matches the Date header field in the message."
    },
    {
        "if": [
            {
                "exist": "Warning"
            }
        ],
        "result": [
            {}
        ],
        "role": "recipient",
        "origin": "If a recipient that uses, evaluates, or displays Warning header fields receives a warn-date that is different from the Date value in the same message, the recipient MUST exclude the warning-value containing that warn-date before storing, forwarding, or using the message."
    },
    {
        "if": [],
        "result": [],
        "role": "recipient",
        "origin": "If all of the warning-values are excluded, the recipient MUST exclude the Warning header field as well."
    },
    {
        "if": {
            "exist": "stale"
        },
        "result": {},
        "role": "cache",
        "origin": "A cache SHOULD generate this whenever the sent response is stale."
    },
    {
        "if": {
            "exist": "stale"
        },
        "result": {},
        "role": "cache",
        "origin": "A cache SHOULD generate this when sending a stale response because an attempt to validate the response failed, due to an inability to reach the server."
    },
    {
        "if": [],
        "result": [],
        "role": "cache",
        "origin": "A cache SHOULD generate this if it is intentionally disconnected from the rest of the network for a period of time."
    },
    {
        "if": [
            {
                "not_final": "hour",
                "not_first": "hour"
            }
        ],
        "result": [],
        "role": "cache",
        "origin": "A cache SHOULD generate this if it heuristically chose a freshness lifetime greater than 24 hours and the response's age is greater than 24 hours."
    }
]